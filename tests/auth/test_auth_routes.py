import pytest
from services.token_service import TokenService
from services.admin_service import AdminService
from core.config import Config

# Configura√ß√µes para o TokenService
JWT_SECRET = "defaultsecret"
JWT_ALGORITHM = "HS256"
token_service = TokenService(jwt_secret=JWT_SECRET, jwt_algorithm=JWT_ALGORITHM)

# Configura√ß√µes para o AdminService
admin_service = AdminService()

# ========================================
# TESTES DE GERA√á√ÉO, RENOVA√á√ÉO E REVOGA√á√ÉO
# ========================================


def test_generate_and_refresh_token():
    """
    üîÑ Gera um refresh_token e o utiliza para obter novo access_token.

    Fluxo testado:
    - Gera tokens usando o TokenService
    - Usa o refresh_token para gerar um novo access_token
    """
    # Gera√ß√£o dos tokens para o usu√°rio ADM (ID 9)
    tokens = token_service.generate_and_store_token(9, "ADM")
    assert (
        "access_token" in tokens and "refresh_token" in tokens
    ), "Tokens n√£o retornados"

    # Renova√ß√£o usando refresh_token
    refresh_token = tokens["refresh_token"]
    decoded_refresh_token = token_service.decode_refresh_token(refresh_token)
    assert decoded_refresh_token["user_id"] == 9, "Refresh token inv√°lido"

    # Gera um novo access_token usando o refresh_token
    new_access_token = token_service.renovar_access_token(refresh_token)
    decoded_new_access_token = token_service.decode_token(new_access_token)
    assert decoded_new_access_token["user_id"] == 9, "Novo access_token inv√°lido"
    assert (
        decoded_new_access_token["cargo"] == "ADM"
    ), "Novo access_token n√£o cont√©m o cargo correto"


def test_revoke_token():
    """
    ‚ùå Testa a revoga√ß√£o manual de um refresh_token usando o servi√ßo AdminService.

    Verifica:
    - Se o token pode ser revogado com sucesso
    """
    # Gera√ß√£o de tokens para o usu√°rio ADM (ID 9)
    tokens = token_service.generate_and_store_token(9, "ADM")
    refresh_token = tokens["refresh_token"]

    # Revoga√ß√£o do refresh_token usando o servi√ßo
    admin_service.revogar_refresh_token(refresh_token)

    # Verifica se o refresh_token foi revogado
    with pytest.raises(ValueError, match="Token inv√°lido!"):
        token_service.decode_refresh_token(refresh_token)


def test_revoke_refresh_token():
    """
    üîê Revoga um refresh_token.

    Valida:
    - Gera√ß√£o de tokens v√°lidos
    - Revoga√ß√£o do refresh_token
    """
    # Gera√ß√£o de tokens para o usu√°rio ADM (ID 9)
    tokens = token_service.generate_and_store_token(9, "ADM")
    refresh_token = tokens["refresh_token"]

    # Revoga√ß√£o do refresh_token usando o TokenService
    token_service.revogar_refresh_token(refresh_token)

    # Verifica se o refresh_token foi revogado
    with pytest.raises(ValueError, match="Token inv√°lido!"):
        token_service.decode_refresh_token(refresh_token)


def test_list_refresh_tokens_paginated():
    """
    üìÑ Lista todos os refresh tokens com pagina√ß√£o e filtros aplicados.

    Valida:
    - Gera√ß√£o de token de administrador
    - Listagem de tokens paginados
    """
    # Gera√ß√£o de token ADM (ID 9)
    tokens = token_service.generate_and_store_token(9, "ADM")

    # Listagem de tokens
    result = admin_service.listar_refresh_tokens(
        page=1, limit=5, email_filter="adm", revogado_filter="false"
    )
    assert "data" in result, "Resposta n√£o cont√©m 'data'"
    assert isinstance(result["data"], list), "Dados retornados n√£o s√£o uma lista"
    assert len(result["data"]) <= 5, "Mais de 5 tokens retornados"
