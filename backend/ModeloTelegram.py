import time
import os
import random
import re
import gspread
import requests
from oauth2client.service_account import ServiceAccountCredentials
from config import Config  # Importando a classe de configura√ß√£o

# Fun√ß√µes auxiliares

def autenticar_outra_planilha(sheet_name):
    """Autentica uma nova planilha do Google Sheets e retorna a refer√™ncia √† planilha especificada."""
    try:
        # Utiliza a mesma autentica√ß√£o com o arquivo de credenciais j√° fornecido
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(Config.CREDENTIALS_FILE, scope)
        client = gspread.authorize(creds)
        
        # Abre a nova planilha pelo nome
        return client.open(sheet_name)
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o da nova planilha {sheet_name}: {e}")
        return None

def obter_dados_outra_planilha(sheet_name, worksheet_name):
    """Obt√©m os CPFs da coluna H na aba 'Dados Twizzy' da planilha espec√≠fica."""
    try:
        # Autentica e abre a planilha espec√≠fica pelo ID
        client = autenticar_google_sheets()
        if not client:
            return []

        # Abre a planilha pelo ID e acessa a aba espec√≠fica
        planilha = client.open_by_key(sheet_id)
        worksheet = planilha.worksheet(worksheet_name)
        
        # Obt√©m os dados da coluna H (CPF) na aba 'Dados Twizzy'
        dados = worksheet.col_values(8)  # Coluna H √© a coluna 8 (come√ßa em 1)
        
        # Filtra CPFs v√°lidos (apenas n√∫meros e com 11 d√≠gitos)
        cpfs_validos = [cpf for cpf in dados if re.match(r'^\d{11}$', cpf)]
        return cpfs_validos
    except Exception as e:
        print(f"‚ùå Erro ao acessar os dados da planilha: {e}")
        return []

def processar_dados_de_outra_planilha(sheet_data, sheet_name, worksheet_name):
    """Processa os dados de outra planilha e os insere na planilha 'Data'."""
    dados_outra_planilha = obter_dados_outra_planilha(sheet_name, worksheet_name)
    
    if not dados_outra_planilha:
        print("‚ö†Ô∏è Nenhum dado encontrado na planilha de origem.")
        return

    # Aqui voc√™ pode implementar a l√≥gica para processar os dados da outra planilha
    # Vamos supor que voc√™ queira apenas copiar para a planilha 'Data'.
    for linha in dados_outra_planilha:
        # Fa√ßa o processamento necess√°rio (como transformar dados, validar, etc.)
        # Exemplo: Adicionando uma nova linha na planilha 'Data'
        sheet_data.append_row(linha)

    print("‚úÖ Dados da outra planilha processados e adicionados na 'Data'.")

def autenticar_google_sheets():
    """Autentica no Google Sheets e retorna a planilha."""
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(Config.CREDENTIALS_FILE, scope)
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        print(f"‚ùå Erro na autentica√ß√£o do Google Sheets: {e}")
        return None

def obter_data_hora():
    """Retorna a data e hora atual no formato 'DD/MM/YYYY HH:MM:SS'."""
    return time.strftime("%d/%m/%Y %H:%M:%S")

def extrair_info(pattern, resposta):
    """Extrai informa√ß√£o da resposta usando regex de forma segura."""
    match = re.search(pattern, resposta)
    return match.group(1).strip() if match else "N√£o Informado"

def remover_linha_checker(sheet_checker, cpf_processo):
    """Remove apenas a linha correspondente ao CPF processado na aba 'Checker'."""
    try:
        dados_checker = sheet_checker.get_all_values()
        if len(dados_checker) <= 1:
            print("‚ö†Ô∏è Nenhum dado encontrado na aba 'Checker'.")
            return

        for i, linha in enumerate(dados_checker[1:], start=2):
            if linha[0] == cpf_processo:
                sheet_checker.delete_rows(i)
                print(f"‚úÖ CPF {cpf_processo} removido da aba 'Checker'.")
                return
        print(f"‚ö†Ô∏è CPF {cpf_processo} n√£o encontrado na aba 'Checker'.")
    except Exception as e:
        print(f"‚ùå Erro ao remover CPF {cpf_processo}: {e}")

def reagendar_cpf_checker(sheet_checker, cpf_falha):
    """Reinsere um CPF na aba 'Checker' em uma posi√ß√£o aleat√≥ria caso a resposta n√£o tenha sido obtida."""
    try:
        dados_checker = sheet_checker.get_all_values()
        posicao_aleatoria = random.randint(2, max(len(dados_checker), 2))
        sheet_checker.insert_row([cpf_falha], posicao_aleatoria)
        print(f"üîÑ CPF {cpf_falha} foi reagendado para a posi√ß√£o {posicao_aleatoria}.")
    except Exception as e:
        print(f"‚ùå Erro ao reagendar CPF {cpf_falha}: {e}")

def obter_cpfs_da_aba_checker(sheet_checker):
    """Obt√©m todos os CPFs da aba 'Checker' para processamento, filtrando valores vazios ou inv√°lidos."""
    try:
        dados_checker = sheet_checker.get_all_values()
        if len(dados_checker) <= 1:
            print("‚ö†Ô∏è Nenhum dado encontrado na aba 'Checker'.")
            return []
        
        # Filtrando CPFs v√°lidos e n√£o vazios
        cpfs = [linha[0] for linha in dados_checker[1:] if linha[0] and re.match(r'^\d{11}$', linha[0])]  # Valida o CPF com 11 d√≠gitos
        return cpfs
    except Exception as e:
        print(f"‚ùå Erro ao obter CPFs da aba 'Checker': {e}")
        return []

def verificar_cpf_existente(sheet_data, cpf):
    """Verifica se o CPF j√° existe na aba 'Dados'. Retorna True se existir, False caso contr√°rio."""
    try:
        dados_data = sheet_data.get_all_values()
        for linha in dados_data[1:]:  # Ignora o cabe√ßalho
            if linha[0] == cpf:
                return True  # CPF j√° existe na aba 'Dados'
        return False  # CPF n√£o existe na aba 'Dados'
    except Exception as e:
        print(f"‚ùå Erro ao verificar CPF na aba 'Dados': {e}")
        return False

def consultar_api(cpf):
    """Consulta a API para obter os dados do CPF."""
    url = f"https://hashirosearch.xyz/cpf.php?token={Config.API_TOKEN}&cpf={cpf}"
    try:
        response = requests.get(url)
        response.raise_for_status()  # Lan√ßa um erro se a resposta n√£o for OK
        return response.json()  # Retorna o JSON da resposta
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na consulta √† API para o CPF {cpf}: {e}")
        return None

def processar_cpf(cpf, sheet_data, sheet_checker):
    """Processa o CPF e atualiza os dados na planilha, com verifica√ß√£o de duplicidade."""
    # Verificar se o CPF j√° foi processado
    if verificar_cpf_existente(sheet_data, cpf):
        print(f"‚ÑπÔ∏è CPF {cpf} j√° foi processado anteriormente. Pulando...")
        return  # Se o CPF j√° foi processado, pula o processamento

    dados_api = consultar_api(cpf)
    contagem = 0  # Contador de tentativas de consulta √† API
    print(f"‚ÑπÔ∏è Processando CPF {cpf}...")

    while not dados_api and contagem < Config.MAX_RETRIES:
        print(f"‚ö†Ô∏è Tentativa {contagem + 1} de consulta √† API para {cpf}...")
        dados_api = consultar_api(cpf)
        contagem += 1
        time.sleep(Config.RETRY_DELAY)  # Aguarda um tempo antes de tentar novamente
    
    # Se ap√≥s as tentativas, n√£o houver dados, reagenda o CPF
    if not dados_api:
        print(f"‚ö†Ô∏è Erro cont√≠nuo ao obter dados para {cpf}. Verificando a causa...")
        reagendar_cpf_checker(sheet_checker, cpf)
        return

    # Agora, acessamos a estrutura correta, com base no retorno da API
    pessoa = dados_api  # O retorno da API j√° tem os dados no n√≠vel raiz

    # Extrair as informa√ß√µes com base na estrutura fornecida
    nome_info = pessoa.get("NOME", "N√£o Informado")
    cpf_info = pessoa.get("CPF", "N√£o Informado")
    nascimento_info = pessoa.get("NASCIMENTO", "N√£o Informado")
    
    # Ajustando o campo sexo
    sexo_info = pessoa.get("SEXO", "Indefinido")
    if sexo_info == "F":
        sexo_info = "Feminino"
    elif sexo_info == "M":
        sexo_info = "Masculino"
    else:
        sexo_info = "Indefinido"
    
    # Renda e poder aquisitivo
    renda_info = pessoa.get("RENDA", "N√£o Informado")
    poder_aquisitivo_info = pessoa.get("PODER_AQUISITIVO", "N√£o Informado")

    # Verifica se o campo de poder aquisitivo cont√©m as palavras "BAIXA" ou "BAIXO" para definir o status
    status_info = "N√£o Enviada" if "BAIXA" in poder_aquisitivo_info.upper() or "BAIXO" in poder_aquisitivo_info.upper() or "SEM INFORMA√á√ÉO" in poder_aquisitivo_info.upper() else "Enviada"
    
    # Extra√ß√£o de Email
    email_info = pessoa.get("EMAIL", [{"EMAIL": "N√£o Informado"}])[0].get("EMAIL", "N√£o Informado")
    
    # Telefone: Pegando o primeiro n√∫mero de celular da lista
    telefone_info = pessoa.get("TELEFONES", [])
    telefone_final = telefone_info[0]["NUMBER"] if telefone_info else "N√£o Informado"

    # Processo de limpeza e formata√ß√£o dos dados
    nome_split = nome_info.split()
    nome = nome_split[0] if nome_split else "N√£o Informado"
    sobrenome = " ".join(nome_split[1:]) if len(nome_split) > 1 else "N√£o Informado"

    # Preencher dados no Google Sheets
    data_hora_extracao = obter_data_hora()
    
    sheet_data.append_row([
        cpf_info, 
        nascimento_info, 
        email_info, 
        nome, 
        sobrenome, 
        telefone_final, 
        sexo_info, 
        renda_info, 
        poder_aquisitivo_info, 
        status_info, 
        data_hora_extracao
    ])

    # Remover linha do checker ap√≥s o processamento
    remover_linha_checker(sheet_checker, cpf)

# Fun√ß√£o principal para executar o processo
def main():
    # Autentica e abre a planilha principal pelo nome ou ID
    sheet = autenticar_google_sheets()
    if sheet is None:
        print("‚ùå Erro na autentica√ß√£o do Google Sheets!")
        return

    # Agora vamos acessar as abas espec√≠ficas dentro da planilha
    try:
        sheet_checker = sheet.open(Config.SHEET_NAME).worksheet(Config.WORKSHEET_CHECKER)
        sheet_data = sheet.open(Config.SHEET_NAME).worksheet(Config.WORKSHEET_DATA)
    except Exception as e:
        print(f"‚ùå Erro ao acessar as abas: {e}")
        return

    # Obter CPFs da aba 'Checker'
    cpfs = obter_cpfs_da_aba_checker(sheet_checker)
    if not cpfs:
        print("‚ö†Ô∏è Nenhum CPF encontrado para processar!")
        return

    # Processar CPFs da aba 'Checker'
    for cpf in cpfs:
        processar_cpf(cpf, sheet_data, sheet_checker)
    print("‚úÖ Processamento dos CPFs conclu√≠do!")

    # ID da planilha de dados Twizzy (obtido do link compartilhado)
    sheet_id = "1u11Btk8RdNTZRnmbBYjs3gWE1rQYgXS8x3LLWpw4ils"
    worksheet_name = "Dados Twizzy"  # Nome da aba na planilha

    # Obter CPFs da coluna H da aba 'Dados Twizzy'
    cpfs_twizzy = obter_dados_outra_planilha(sheet_id, worksheet_name)
    if not cpfs_twizzy:
        print("‚ö†Ô∏è Nenhum CPF encontrado na planilha 'Dados Twizzy'.")
        return

    print(f"‚öôÔ∏è CPFs encontrados na planilha 'Dados Twizzy': {cpfs_twizzy}")
    # Aqui voc√™ pode adicionar a l√≥gica de processar esses CPFs como desejar.

if __name__ == "__main__":
    main()